<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="25" passed="20" failed="5" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-10-15T21:31:53 CEST" name="Default suite" finished-at="2021-10-15T21:33:13 CEST" duration-ms="80079">
    <groups>
    </groups>
    <test started-at="2021-10-15T21:31:53 CEST" name="Default test" finished-at="2021-10-15T21:33:13 CEST" duration-ms="80079">
      <class name="test.TestPage">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:31:53 CEST" name="setUp" finished-at="2021-10-15T21:31:55 CEST" duration-ms="2328" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:31:55 CEST" name="beforetest" finished-at="2021-10-15T21:31:55 CEST" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="clickabilityOfClickMeButton()[pri:1, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:31:55 CEST" name="clickabilityOfClickMeButton" finished-at="2021-10-15T21:32:01 CEST" duration-ms="5620" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickabilityOfClickMeButton -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:01 CEST" name="afterTest" finished-at="2021-10-15T21:32:02 CEST" duration-ms="894" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:02 CEST" name="beforetest" finished-at="2021-10-15T21:32:02 CEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormSubmitingNewDataUpdatesOutputHappyFlow()[pri:1, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:02 CEST" name="userFormSubmitingNewDataUpdatesOutputHappyFlow" finished-at="2021-10-15T21:32:04 CEST" duration-ms="2213" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Name:Name
Email:test@test.com
Current Address :Address1
Permananet Address :Address2] but found [Name:Name
Email:test@test.com
Current Address :Address1
Permanent Address :Address2]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Name:Name
Email:test@test.com
Current Address :Address1
Permananet Address :Address2] but found [Name:Name
Email:test@test.com
Current Address :Address1
Permanent Address :Address2]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at test.TestPage.userFormHappyFlowAllFieldsFilled(TestPage.java:148)
at test.TestPage.userFormSubmitingNewDataUpdatesOutputHappyFlow(TestPage.java:283)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormSubmitingNewDataUpdatesOutputHappyFlow -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:04 CEST" name="afterTest" finished-at="2021-10-15T21:32:05 CEST" duration-ms="662" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:05 CEST" name="beforetest" finished-at="2021-10-15T21:32:05 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="AlertsCardOnHomepageIsClickable()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:05 CEST" name="AlertsCardOnHomepageIsClickable" finished-at="2021-10-15T21:32:06 CEST" duration-ms="1666" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AlertsCardOnHomepageIsClickable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:06 CEST" name="afterTest" finished-at="2021-10-15T21:32:07 CEST" duration-ms="856" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:07 CEST" name="beforetest" finished-at="2021-10-15T21:32:07 CEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="BookStoreCardOnHomepageIsClickable()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:07 CEST" name="BookStoreCardOnHomepageIsClickable" finished-at="2021-10-15T21:32:08 CEST" duration-ms="670" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStoreCardOnHomepageIsClickable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:08 CEST" name="afterTest" finished-at="2021-10-15T21:32:09 CEST" duration-ms="1439" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:09 CEST" name="beforetest" finished-at="2021-10-15T21:32:09 CEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="ElementsCardOnHomepageIsClickable()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:09 CEST" name="ElementsCardOnHomepageIsClickable" finished-at="2021-10-15T21:32:11 CEST" duration-ms="1346" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ElementsCardOnHomepageIsClickable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:11 CEST" name="afterTest" finished-at="2021-10-15T21:32:11 CEST" duration-ms="529" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:11 CEST" name="beforetest" finished-at="2021-10-15T21:32:11 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="FormsCardOnHomepageIsClickable()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:11 CEST" name="FormsCardOnHomepageIsClickable" finished-at="2021-10-15T21:32:12 CEST" duration-ms="798" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FormsCardOnHomepageIsClickable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:12 CEST" name="afterTest" finished-at="2021-10-15T21:32:13 CEST" duration-ms="1049" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:13 CEST" name="beforetest" finished-at="2021-10-15T21:32:13 CEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="InteractionsCardOnHomepageIsClickable()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:13 CEST" name="InteractionsCardOnHomepageIsClickable" finished-at="2021-10-15T21:32:14 CEST" duration-ms="1078" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InteractionsCardOnHomepageIsClickable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:14 CEST" name="afterTest" finished-at="2021-10-15T21:32:15 CEST" duration-ms="837" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:15 CEST" name="beforetest" finished-at="2021-10-15T21:32:15 CEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="WidgetsCardOnHomepageIsClickable()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:15 CEST" name="WidgetsCardOnHomepageIsClickable" finished-at="2021-10-15T21:32:16 CEST" duration-ms="1040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WidgetsCardOnHomepageIsClickable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:16 CEST" name="afterTest" finished-at="2021-10-15T21:32:17 CEST" duration-ms="668" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:17 CEST" name="beforetest" finished-at="2021-10-15T21:32:17 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="elementCardMenuCollapseAndUncollapse()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:17 CEST" name="elementCardMenuCollapseAndUncollapse" finished-at="2021-10-15T21:32:28 CEST" duration-ms="11661" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- elementCardMenuCollapseAndUncollapse -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:28 CEST" name="afterTest" finished-at="2021-10-15T21:32:29 CEST" duration-ms="658" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:29 CEST" name="beforetest" finished-at="2021-10-15T21:32:29 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="elementsCardMenuCollapsedWhenElementPageIsOpened()[pri:10, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:29 CEST" name="elementsCardMenuCollapsedWhenElementPageIsOpened" finished-at="2021-10-15T21:32:30 CEST" duration-ms="559" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- elementsCardMenuCollapsedWhenElementPageIsOpened -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:30 CEST" name="afterTest" finished-at="2021-10-15T21:32:30 CEST" duration-ms="807" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:30 CEST" name="beforetest" finished-at="2021-10-15T21:32:30 CEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="buttonsIsClickableAndOpensButtonsPageWhenClicked()[pri:20, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:30 CEST" name="buttonsIsClickableAndOpensButtonsPageWhenClicked" finished-at="2021-10-15T21:32:32 CEST" duration-ms="1279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- buttonsIsClickableAndOpensButtonsPageWhenClicked -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:32 CEST" name="afterTest" finished-at="2021-10-15T21:32:32 CEST" duration-ms="773" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:32 CEST" name="beforetest" finished-at="2021-10-15T21:32:32 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="radioButtonIsClickableAndOpensRadioButtonsWhenClicked()[pri:20, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:32 CEST" name="radioButtonIsClickableAndOpensRadioButtonsWhenClicked" finished-at="2021-10-15T21:32:33 CEST" duration-ms="777" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- radioButtonIsClickableAndOpensRadioButtonsWhenClicked -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:33 CEST" name="afterTest" finished-at="2021-10-15T21:32:34 CEST" duration-ms="1229" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:34 CEST" name="beforetest" finished-at="2021-10-15T21:32:34 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="textBoxIsClickableAndOpensUserFormWhenClicked()[pri:20, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:34 CEST" name="textBoxIsClickableAndOpensUserFormWhenClicked" finished-at="2021-10-15T21:32:36 CEST" duration-ms="1786" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- textBoxIsClickableAndOpensUserFormWhenClicked -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:36 CEST" name="afterTest" finished-at="2021-10-15T21:32:37 CEST" duration-ms="560" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:37 CEST" name="beforetest" finished-at="2021-10-15T21:32:37 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="clickabilityOfDoubleClickMeButton()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:37 CEST" name="clickabilityOfDoubleClickMeButton" finished-at="2021-10-15T21:32:38 CEST" duration-ms="1488" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickabilityOfDoubleClickMeButton -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:38 CEST" name="afterTest" finished-at="2021-10-15T21:32:39 CEST" duration-ms="811" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:39 CEST" name="beforetest" finished-at="2021-10-15T21:32:39 CEST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="clickabilityOfRightClickMeButton()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:39 CEST" name="clickabilityOfRightClickMeButton" finished-at="2021-10-15T21:32:41 CEST" duration-ms="1468" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickabilityOfRightClickMeButton -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:41 CEST" name="afterTest" finished-at="2021-10-15T21:32:41 CEST" duration-ms="468" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:41 CEST" name="beforetest" finished-at="2021-10-15T21:32:41 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="impressiveButtonIsClicable()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:41 CEST" name="impressiveButtonIsClicable" finished-at="2021-10-15T21:32:43 CEST" duration-ms="1448" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- impressiveButtonIsClicable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:43 CEST" name="afterTest" finished-at="2021-10-15T21:32:44 CEST" duration-ms="1008" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:44 CEST" name="beforetest" finished-at="2021-10-15T21:32:44 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="noButtonIsClicable()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:44 CEST" name="noButtonIsClicable" finished-at="2021-10-15T21:32:49 CEST" duration-ms="5868" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:819)
at org.testng.Assert.assertEquals(Assert.java:829)
at test.TestPage.noButtonIsClicable(TestPage.java:373)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- noButtonIsClicable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:49 CEST" name="afterTest" finished-at="2021-10-15T21:32:50 CEST" duration-ms="651" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:50 CEST" name="beforetest" finished-at="2021-10-15T21:32:50 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormHappyFlowAllFieldsFilled()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:50 CEST" name="userFormHappyFlowAllFieldsFilled" finished-at="2021-10-15T21:32:52 CEST" duration-ms="2185" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Name:Name
Email:test@test.com
Current Address :Address1
Permananet Address :Address2] but found [Name:Name
Email:test@test.com
Current Address :Address1
Permanent Address :Address2]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Name:Name
Email:test@test.com
Current Address :Address1
Permananet Address :Address2] but found [Name:Name
Email:test@test.com
Current Address :Address1
Permanent Address :Address2]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at test.TestPage.userFormHappyFlowAllFieldsFilled(TestPage.java:148)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormHappyFlowAllFieldsFilled -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:52 CEST" name="afterTest" finished-at="2021-10-15T21:32:53 CEST" duration-ms="636" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:53 CEST" name="beforetest" finished-at="2021-10-15T21:32:53 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormHappyFlowOnlyCurrentAddressFilled()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:53 CEST" name="userFormHappyFlowOnlyCurrentAddressFilled" finished-at="2021-10-15T21:32:55 CEST" duration-ms="1674" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormHappyFlowOnlyCurrentAddressFilled -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:55 CEST" name="afterTest" finished-at="2021-10-15T21:32:56 CEST" duration-ms="902" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:56 CEST" name="beforetest" finished-at="2021-10-15T21:32:56 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormHappyFlowOnlyEmailFilled()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:56 CEST" name="userFormHappyFlowOnlyEmailFilled" finished-at="2021-10-15T21:32:58 CEST" duration-ms="1990" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormHappyFlowOnlyEmailFilled -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:58 CEST" name="afterTest" finished-at="2021-10-15T21:32:58 CEST" duration-ms="677" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:58 CEST" name="beforetest" finished-at="2021-10-15T21:32:58 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormHappyFlowOnlyFullNameFilled()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:32:58 CEST" name="userFormHappyFlowOnlyFullNameFilled" finished-at="2021-10-15T21:33:00 CEST" duration-ms="1671" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormHappyFlowOnlyFullNameFilled -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:00 CEST" name="afterTest" finished-at="2021-10-15T21:33:01 CEST" duration-ms="1118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:01 CEST" name="beforetest" finished-at="2021-10-15T21:33:01 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormHappyFlowOnlyPermanentAddressFilled()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:01 CEST" name="userFormHappyFlowOnlyPermanentAddressFilled" finished-at="2021-10-15T21:33:03 CEST" duration-ms="1864" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Permananet Address :Address2] but found [Permanent Address :Address2]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Permananet Address :Address2] but found [Permanent Address :Address2]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at test.TestPage.userFormHappyFlowOnlyPermanentAddressFilled(TestPage.java:227)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormHappyFlowOnlyPermanentAddressFilled -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:03 CEST" name="afterTest" finished-at="2021-10-15T21:33:04 CEST" duration-ms="845" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:04 CEST" name="beforetest" finished-at="2021-10-15T21:33:04 CEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="yesButtonIsClicable()[pri:30, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:04 CEST" name="yesButtonIsClicable" finished-at="2021-10-15T21:33:05 CEST" duration-ms="1409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- yesButtonIsClicable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:05 CEST" name="afterTest" finished-at="2021-10-15T21:33:06 CEST" duration-ms="731" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:06 CEST" name="beforetest" finished-at="2021-10-15T21:33:06 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormSadFlowInvalidEmail()[pri:40, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:06 CEST" name="userFormSadFlowInvalidEmail" finished-at="2021-10-15T21:33:09 CEST" duration-ms="2723" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormSadFlowInvalidEmail -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:09 CEST" name="afterTest" finished-at="2021-10-15T21:33:09 CEST" duration-ms="579" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforetest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:09 CEST" name="beforetest" finished-at="2021-10-15T21:33:09 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="userFormSubmitingNewDataUpdatesOutputSadFlow()[pri:50, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:09 CEST" name="userFormSubmitingNewDataUpdatesOutputSadFlow" finished-at="2021-10-15T21:33:11 CEST" duration-ms="2253" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Name:Name
Email:test@test.com
Current Address :Address1
Permananet Address :Address2] but found [Name:Name
Email:test@test.com
Current Address :Address1
Permanent Address :Address2]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Name:Name
Email:test@test.com
Current Address :Address1
Permananet Address :Address2] but found [Name:Name
Email:test@test.com
Current Address :Address1
Permanent Address :Address2]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at test.TestPage.userFormHappyFlowAllFieldsFilled(TestPage.java:148)
at test.TestPage.userFormSubmitingNewDataUpdatesOutputSadFlow(TestPage.java:311)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userFormSubmitingNewDataUpdatesOutputSadFlow -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:11 CEST" name="afterTest" finished-at="2021-10-15T21:33:12 CEST" duration-ms="645" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:test.TestPage@70e8f8e]" started-at="2021-10-15T21:33:12 CEST" name="tearDown" finished-at="2021-10-15T21:33:13 CEST" duration-ms="625" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- test.TestPage -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
